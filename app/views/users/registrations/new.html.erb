<h2></h2>
<%= form_for(resource, :as => resource_name,:html=>{:class=>"validate_reg"}, :url => registration_path(resource_name)) do |f| %>
  <%#= devise_error_messages! %>

  <div><%= f.label :email,t(:email) %>
  <%= f.email_field :email, :autofocus => true %></div>

  <div><%= f.label :password, t(:password) %>
  <%= f.password_field :password %></div>

  <div><%= f.label :password_confirmation, t(:password_confirmation) %>
  <%= f.password_field :password_confirmation %></div>


<div>
  <label for="team_ids"><%= t(:teams)%></label>
  <%= select_tag "team_ids", options_from_collection_for_select(Team.all, "id", "name"),:multiple=>true,:class=>"chosen" %>
</div>
<div>
  <input type="checkbox" id="new_team_check">
  <label for="new_team_check"><%= t(:create_new_team)%></label>
</div>  
<div class="disabled">
  <label for="new_team"><%= t(:team_name)%></label>
  <input id="new_team" disabled="disabled" type="text" name="new_team">
</div> 

  <div><%= f.submit "Sign up",:class=>"btn btn-primary" %></div>
<% end %>

<%= render "users/shared/links" %>


<script type="text/javascript">
  $(document).ready(function(){
       $.validator.setDefaults({
        ignore: ':hidden:not(.chzn-done)',
        errorPlacement: function(error, element) {
          console.log(error);
            if(element.hasClass('chzn-done')) {
                var id = element.attr("id");
                $("#"+id+"_chzn").addClass("error");
                error.insertAfter(element.siblings("div"));
            }
            else
              error.insertAfter(element);

        }
    });
    $('.chosen').chosen()
        .change(function () {
            var id = $(this).attr("id");
            console.log(id);
            if($(this).valid()){
                $("#"+id+"_chzn").removeClass("error");
                            console.log("tred");

              }
            else{
                $("#"+id+"_chzn").addClass("error");
                                            console.log("fas");}

    });
    $.validator.addMethod("checkteam",function(){
        return !($("#new_team").val()=="" && $("#team_ids").val()==null)
  },"Select or create team" );
    $(".validate_reg").validate({
        rules: {
          "user[email]": {
            email:true,
            required: true,
            remote: "/validate/email"
          },
          "user[password]": {
            required: true,
            minlength: 8
          },
          "user[password_confirmation]": {
            required: true,
            equalTo: ".validate_reg #user_password"
          },
          "team_ids[]":{
            "checkteam":true
          },
          "new_team":{
            required:function(ele){ return $("#new_team_check").is(":checked")}
          }
        },
        messages: {
         "user[email]": {
           email: "Invalid Email",
           remote: I18n.t("js.error_messages.email_not_available"),
           required: I18n.t("js.error_messages.enter_email")
         },
         "user[password]":{
            required :I18n.t("js.error_messages.enter_password")
         },
         "user[password_confirmation]":{
            required : I18n.t("js.error_messages.enter_confirm_password"),
            equalTo : I18n.t("js.error_messages.passwords_do_not_match")
         },
         "team_ids[]":{
            checkteam:I18n.t("js.error_messages.select_or_create_team")
         }
         },
        highlight: function(label) {
          return $(label).closest(".control-group").addClass("error");
        },
        errorPlacement: function(error, element) {
            if($(element).is(':checkbox')){
                error.insertAfter(element.siblings("label"));
            }
            else {
                error.insertAfter(element);
            }
        }
    });

   window.availableTags = <%= raw Team.all.collect {|p| p.name } %>;
       $("#team_name_sign_up").autocomplete({
          source: availableTags
        });


  });
</script>